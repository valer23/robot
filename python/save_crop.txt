#!usr/bin/env python

import cv2
import os


class FaceCrop:

    def __init__(self):
        self.image_path = "test.jpg"
        self.cascade_path = "haarcascade_frontalface_alt.xml"

        # Create the haar cascade
        self.face_cascade = cv2.CascadeClassifier(self.cascade_path)

        # Read the image
        image_full_size = cv2.imread(self.image_path)
        self.image = cv2.resize(image_full_size, (972, 648))
        # image = cv2.imread(imagePath)     # If image is not too big

        # Transform the RGB image to GRAY image
        self.gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)

    def img_crop(self, image, crop_box, box_scale=1):
        # Crop a PIL image with the provided box [x(left), y(upper), w(width), h(height)]

        # Calculate scale factors
        x_delta = max(crop_box[2] * (box_scale - 1), 0)
        y_delta = max(crop_box[3] * (box_scale - 1), 0)

        # Convert cv box to PIL box [left, upper, right, lower]
        pil_box = [crop_box[0] - x_delta, crop_box[1] - y_delta, crop_box[0] + crop_box[2] + x_delta,
                   crop_box[1] + crop_box[3] + y_delta]

        return image.crop(pil_box)

    def face_crop(self, faces, box_scale = 1):
        # Select one of the haarcascade files:
        #   haarcascade_frontalface_alt.xml  <-- Best one
        #   haarcascade_frontalface_alt2.xml
        #   haarcascade_frontalface_alt_tree.xml
        #   haarcascade_frontalface_default.xml
        #   haarcascade_profileface.xml
        # faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_alt.xml')

        faces = self.face_detection()   # ATTENTION CHANGER ICI
        if faces:
            n = 1
            for face in faces:
                cropped_image = self.image_crop(self.image, face[0], box_scale)  # box_scale not defined, because =1
                fname, ext = os.path.splitext(self.image)
                cropped_image.save(fname, '_crop', n, ext)
                n += 1
        else:
            print('No faces found:', self.image)

    def image_crop(self, image, crop_box, box_scale=1):
        # Crop a PIL image with the provided box [x(left), y(upper), w(width), h(height)]

        # Calculate scale factors
        x_delta = max(crop_box[2] * (box_scale - 1), 0)
        y_delta = max(crop_box[3] * (box_scale - 1), 0)

        # Convert cv box to PIL box [left, upper, right, lower]
        pil_box = [crop_box[0] - x_delta, crop_box[1] - y_delta, crop_box[0] + crop_box[2] + x_delta,
                   crop_box[1] + crop_box[3] + y_delta]

        return image.crop(pil_box)

    def display_image(self):
        cv2.imshow("Faces found", self.image)

    def save_image(self):
        new_name = "./detect_" + self.image_path
        cv2.imwrite(new_name, self.image)


if '__name__' == '__main__':
    f = FaceCrop()
